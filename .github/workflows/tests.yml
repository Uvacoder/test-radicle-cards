name: tests
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  # check:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Setup Node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: "18.12.1"
  #     - uses: actions/checkout@v3
  #     - run: npm ci
  #     - run: npm run check

  # check-build:
  #   timeout-minutes: 30
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: "18.12.1"
  #     - name: Install dependencies
  #       run: npm ci
  #     - name: Install Playwright Browsers
  #       run: npx playwright install --with-deps
  #     - name: Build app
  #       run: npm run build
  #     - name: Run Playwright build smoke test
  #       run: npm run test:e2e -- --project chromium --config playwright.buildSmoke.config.ts
  #     - name: Upload artifacts
  #       uses: actions/upload-artifact@v3
  #       if: always()
  #       with:
  #         name: test-artifacts-${{ runner.os }}
  #         retention-days: 30
  #         if-no-files-found: "ignore"
  #         path: |
  #           tests/artifacts/**/*

  # check-format:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Setup Node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: "18.12.1"
  #     - uses: actions/checkout@v3
  #     - run: npm ci
  #     - run: ./scripts/check-format
  #       shell: bash

  # check-unit-test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Setup Node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: "18.12.1"
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - run: npm ci
  #     - run: npm run test:unit

  check-e2e:
    continue-on-error: true
    strategy:
      matrix:
        #browser: [chromium, firefox, visual]
        browser: [visual]
    timeout-minutes: 30
    runs-on: ubuntu-latest
    outputs:
      visual-state: ${{ steps.run-playwright-tests.outputs.visual-state }}
    steps:
      - uses: actions/checkout@v3

      # - name: Evict playwright snapshot cache when pushing to master
      #   run: |
      #     if [ ${{ matrix.browser }} = "visual" ] && [ ${{ github.ref }} = "refs/heads/master" ]; then
      #       echo "Deleting ${{ runner.os }}-snapshots cache"
      #       gh extension install actions/gh-actions-cache
      #       gh actions-cache delete ${{ runner.os }}-snapshots --confirm || true
      #       echo "Done"
      #     fi
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - uses: actions/setup-node@v3
      #   with:
      #     node-version: "18.12.1"

      # - name: Install dependencies
      #   run: npm ci

      # - name: Cache Playwright browsers
      #   uses: actions/cache@v3
      #   id: playwright-dep-cache
      #   with:
      #     path: ~/.cache/ms-playwright
      #     key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}

      # - name: Cache Playwright visual snapshots
      #   uses: actions/cache@v3
      #   id: playwright-snapshot-cache
      #   with:
      #     path: tests/visual/snapshots/**/*
      #     key: ${{ runner.os }}-snapshots

      # - name: Install Playwright browsers and OS dependencies if cache miss
      #   if: steps.playwright-dep-cache.outputs.cache-hit != 'true'
      #   run: npx playwright install --with-deps

      # - name: Install only Playwright OS dependencies if cache hit
      #   if: steps.playwright-dep-cache.outputs.cache-hit == 'true'
      #   run: npx playwright install-deps

      # - name: Start http-api test server
      #   run: ./scripts/run-http-api-with-fixtures --non-interactive --detach

      - name: Run Playwright tests
        id: run-playwright-tests
        # run: |
        #   if [ ${{ matrix.browser }} = "visual" ] && [ ${{ github.ref }} = "refs/heads/master" ]; then
        #     npm run test:e2e -- --project ${{ matrix.browser }} --update-snapshots;
        #   elif [ ${{ matrix.browser }} = "visual" ]; then
        #     npm run test:e2e -- --project visual || echo "visual-state=Visuals failed please check artifacts" >> $GITHUB_OUTPUT
        #   else
        #     npm run test:e2e -- --project ${{ matrix.browser }};
        #   fi
        run: |
            echo "visual_state=Visuals failed please check artifacts" >> $GITHUB_OUTPUT

      - name: Generate summary
        run: |
          echo "Visual test state: ${{ steps.run-playwright-tests.outputs.visual_state }}" >> $GITHUB_STEP_SUMMARY
          echo "Hey @${{ github.event.pull_request.user.login }}, check out the visual diffs" >> $GITHUB_STEP_SUMMARY

      # - name: Upload artifacts
      #   uses: actions/upload-artifact@v3
      #   if: always()
      #   with:
      #     name: test-artifacts-${{ runner.os }}
      #     retention-days: 30
      #     if-no-files-found: "ignore"
      #     path: |
      #       tests/artifacts/**/*
